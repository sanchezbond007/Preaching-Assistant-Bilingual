# AGREGAR AL INICIO DE temas_profundos.py (despu√©s de los imports):

def traducir_texto(texto, idioma_destino):
    """Traducir texto b√°sico espa√±ol-ingl√©s"""
    if idioma_destino == 'es':
        return texto
    
    # Traducciones b√°sicas espa√±ol ‚Üí ingl√©s
    traducciones = {
        # T√≠tulos principales
        'TEMAS PROFUNDOS': 'DEEP TOPICS',
        'Contenido:': 'Content:',
        'Conclusi√≥n:': 'Conclusion:',
        'Copiar': 'Copy',
        'Cerrar': 'Close',
        'Volver': 'Back',
        
        # Frases comunes
        'La mayor√≠a de las religiones ense√±an que el': 'Most religions teach that the',
        'alma es inmortal y que sigue viviendo despu√©s': 'soul is immortal and continues living after',
        'de la muerte. Sin embargo, la Biblia ense√±a lo': 'death. However, the Bible teaches the',
        'contrario: que el alma puede morir y que el ser': 'opposite: that the soul can die and that the',
        'humano no tiene una parte separada que': 'human being does not have a separate part that',
        'contin√∫e consciente despu√©s de la muerte.': 'continues conscious after death.',
        
        'La ense√±anza b√≠blica muestra que el alma no es': 'Biblical teaching shows that the soul is not',
        'inmortal. El alma es la persona completa, que': 'immortal. The soul is the complete person, who',
        'muere al morir el cuerpo. La verdadera': 'dies when the body dies. The true',
        'esperanza para los muertos es la resurrecci√≥n': 'hope for the dead is the resurrection',
        'que Dios promete mediante Jes√∫s.': 'that God promises through Jesus.',
        
        # Jesucristo
        'Jesucristo es el Hijo de Dios. No es el Dios': 'Jesus Christ is the Son of God. He is not the',
        'Todopoderoso, sino que fue creado por Jehov√°.': 'Almighty God, but was created by Jehovah.',
        'Fue enviado a la Tierra para ense√±ar la verdad,': 'He was sent to Earth to teach the truth,',
        'dar su vida por la humanidad y mostrar el': 'give his life for humanity and show the',
        'camino a la vida eterna. Sus ense√±anzas y': 'way to eternal life. His teachings and',
        'ejemplo nos ayudan a acercarnos a Dios.': 'example help us draw closer to God.'
    }
    
    # Aplicar traducciones
    texto_traducido = texto
    for esp, eng in traducciones.items():
        texto_traducido = texto_traducido.replace(esp, eng)
    
    return texto_traducido

# BUSCAR LA FUNCI√ìN mostrar_detalle_tema_profundo Y MODIFICAR:

def mostrar_detalle_tema_profundo(self, instance, nombre_archivo):
    """Mostrar detalle con traducci√≥n"""
    try:
        print(f"üìñ Abriendo tema profundo: {nombre_archivo}")
        
        ruta_archivo = f'datos/temas_profundos/{nombre_archivo}'
        if not os.path.exists(ruta_archivo):
            print(f"‚ùå Archivo no encontrado: {ruta_archivo}")
            return
        
        with open(ruta_archivo, 'r', encoding='utf-8') as f:
            contenido = f.read()
        
        # TRADUCIR CONTENIDO SEG√öN IDIOMA
        contenido_traducido = traducir_texto(contenido, self.idioma)
        
        # Crear layout del popup
        content = BoxLayout(orientation='vertical', spacing=10, padding=20)
        
        scroll = ScrollView()
        scroll_content = BoxLayout(
            orientation='vertical',
            spacing=10,
            size_hint_y=None,
            padding=[10, 0]
        )
        scroll_content.bind(minimum_height=scroll_content.setter('height'))
        
        # Separar t√≠tulo y contenido
        lineas = contenido_traducido.strip().split('\n')
        if lineas:
            titulo_tema = lineas[0]
            resto_contenido = '\n'.join(lineas[1:]) if len(lineas) > 1 else ""
        else:
            titulo_tema = "Sin t√≠tulo"
            resto_contenido = "Sin contenido"
        
        # Label del contenido con TEXTO BLANCO
        label_contenido = Label(
            text=resto_contenido,
            text_size=(dp(300), None),
            halign='left',
            valign='top',
            markup=False,
            color=(1, 1, 1, 1),  # ‚úÖ TEXTO BLANCO
            font_size='14sp',
            size_hint_y=None
        )
        label_contenido.bind(texture_size=label_contenido.setter('size'))
        scroll_content.add_widget(label_contenido)
        
        scroll.add_widget(scroll_content)
        content.add_widget(scroll)
        
        # Botones
        botones_layout = BoxLayout(
            orientation='horizontal',
            spacing=10,
            size_hint_y=None,
            height=dp(50)
        )
        
        btn_copiar = Button(
            text=traducir_texto('üìã Copiar', self.idioma),
            background_color=(0.2, 0.7, 0.2, 1),
            font_size='16sp'
        )
        btn_copiar.bind(on_press=lambda x: self.copiar_al_portapapeles(contenido_traducido))
        
        btn_cerrar = Button(
            text=traducir_texto('‚ùå Cerrar', self.idioma),
            background_color=(0.8, 0.3, 0.3, 1),
            font_size='16sp'
        )
        
        botones_layout.add_widget(btn_copiar)
        botones_layout.add_widget(btn_cerrar)
        content.add_widget(botones_layout)
        
        # Crear popup con t√≠tulo traducido
        popup_titulo = traducir_texto(titulo_tema, self.idioma)
        popup = Popup(
            title=f"üìö {popup_titulo}",
            content=content,
            size_hint=(0.95, 0.8),
            auto_dismiss=True,
            separator_color=[0.2, 0.4, 0.6, 1],
            title_color=[1, 1, 1, 1],  # ‚úÖ T√çTULO BLANCO
            title_size='16sp'
        )
        
        btn_cerrar.bind(on_press=popup.dismiss)
        popup.open()
        
    except Exception as e:
        print(f"‚ùå Error abriendo tema profundo: {e}")

# TAMBI√âN MODIFICAR LA FUNCI√ìN crear_interfaz PARA TRADUCIR BOTONES:

def crear_interfaz(self):
    # ... c√≥digo existente ...
    
    # En la parte donde creas btn_volver:
    btn_volver = Button(
        text=traducir_texto('üîô Volver', self.idioma),
        size_hint_y=None,
        height=dp(60),
        background_color=(0.3, 0.3, 0.3, 1),
        color=(1, 1, 1, 1),
        font_size='18sp',
        bold=True
    )
#!/usr/bin/env python3
"""
pantallas/temas_profundos.py - PARTE 1
Pantalla de Temas Profundos - Estructura Principal y Configuraci√≥n
"""

import os
import json
import random
from kivy.uix.screenmanager import Screen
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.label import Label
from kivy.uix.button import Button
from kivy.uix.scrollview import ScrollView
from kivy.uix.popup import Popup
from kivy.uix.textinput import TextInput
from kivy.metrics import dp
from kivy.clock import Clock

class PantallaTemasProfundos(Screen):
    def __init__(self, **kwargs):
        # üéØ ADAPTACI√ìN: Extraer callbacks y configuraciones
        self.volver_callback = kwargs.pop('volver_callback', None)
        self.idioma_inicial = kwargs.pop('idioma', 'es')
        
        super(PantallaTemasProfundos, self).__init__(**kwargs)
        
        # üÜï INTEGRACI√ìN: Variables de estado
        self.usuario_actual = None
        self.idioma_usuario = self.idioma_inicial
        self.todos_los_temas = []
        self.temas_mostrados = []
        self.temas_por_pagina = 10
        self.historial_individual = None
        
        # üéØ INTEGRACI√ìN: Cargar sistema de historial si est√° disponible
        self.cargar_sistema_historial()
        
        self.build_ui()

    def cargar_sistema_historial(self):
        """üÜï INTEGRACI√ìN: Cargar sistema de historial individual"""
        try:
            from pantallas.send_resume_individual import HistorialIndividual
            self.historial_individual = HistorialIndividual()
            print("‚úÖ Sistema de historial integrado en Temas Profundos")
        except ImportError:
            print("‚ö†Ô∏è Sistema de historial no disponible")
            self.historial_individual = None

    def build_ui(self):
        """üéØ ADAPTACI√ìN: Interfaz principal con dise√±o consistente"""
        main_layout = BoxLayout(orientation='vertical', padding=dp(10), spacing=dp(5))
        
        # üéØ T√çTULO DE LA PANTALLA
        titulo = Label(
            text='üìö TEMAS PROFUNDOS\nDEEP TOPICS',
            font_size='20sp',
            size_hint_y=None,
            height=dp(80),
            halign='center',
            bold=True,
            color=(1, 1, 1, 1)
        )
        titulo.bind(size=titulo.setter('text_size'))
        main_layout.add_widget(titulo)
        
        # üéØ BOTONES DE ACCI√ìN
        botones_layout = BoxLayout(
            orientation='horizontal', 
            spacing=dp(10), 
            size_hint_y=None, 
            height=dp(50)
        )
        
        # Bot√≥n para nuevos temas
        self.btn_nuevas_sugerencias = Button(
            text='Nuevos Temas',
            background_color=(0.3, 0.6, 0.3, 1),
            color=(1, 1, 1, 1),
            font_size='14sp',
            bold=True
        )
        self.btn_nuevas_sugerencias.bind(on_press=self.generar_nuevos_temas)
        botones_layout.add_widget(self.btn_nuevas_sugerencias)
        
        # Bot√≥n para buscar
        self.btn_buscar = Button(
            text='Buscar',
            background_color=(0.6, 0.3, 0.6, 1),
            color=(1, 1, 1, 1),
            font_size='14sp',
            bold=True
        )
        self.btn_buscar.bind(on_press=self.mostrar_busqueda)
        botones_layout.add_widget(self.btn_buscar)
        
        main_layout.add_widget(botones_layout)
        
        # üéØ SCROLL CON CONTENIDO
        scroll = ScrollView()
        self.content_layout = BoxLayout(
            orientation='vertical', 
            spacing=dp(5), 
            size_hint_y=None,
            padding=[dp(5), 0]
        )
        self.content_layout.bind(minimum_height=self.content_layout.setter('height'))
        
        scroll.add_widget(self.content_layout)
        main_layout.add_widget(scroll)
        
        # üéØ BOT√ìN VOLVER
        self.btn_volver = Button(
            text='üîô Volver',
            size_hint_y=None,
            height=dp(50),
            background_color=(0.3, 0.3, 0.3, 1),
            color=(1, 1, 1, 1),
            font_size='16sp',
            bold=True
        )
        self.btn_volver.bind(on_press=self.ir_al_menu)
        main_layout.add_widget(self.btn_volver)
        
        self.add_widget(main_layout)

    def on_enter(self):
        """üéØ ADAPTACI√ìN: Configuraci√≥n al entrar a la pantalla"""
        print("üìö Entrando a Temas Profundos...")
        
        # Actualizar idioma
        self.actualizar_idioma()
        
        # Cargar datos
        self.cargar_todos_los_temas()
        self.cargar_temas_iniciales()
        
        # üÜï INTEGRACI√ìN: Actualizar archivo de usuario actual
        self.actualizar_archivo_usuario()

    def actualizar_archivo_usuario(self):
        """üÜï INTEGRACI√ìN: Actualizar archivo usuario_actual.json"""
        try:
            usuario_data = {
                'usuario': self.usuario_actual or 'usuario_anonimo',
                'idioma': self.idioma_usuario,
                'pantalla_actual': 'temas_profundos',
                'timestamp': self.obtener_timestamp()
            }
            
            with open('usuario_actual.json', 'w', encoding='utf-8') as f:
                json.dump(usuario_data, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ Archivo usuario_actual.json actualizado - Idioma: {self.idioma_usuario}")
        except Exception as e:
            print(f"‚ö†Ô∏è Error actualizando usuario_actual.json: {e}")

    def obtener_timestamp(self):
        """üõ†Ô∏è UTILIDAD: Obtener timestamp actual"""
        try:
            import datetime
            return datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        except:
            return "N/A"

    def actualizar_idioma(self, nuevo_idioma=None):
        """üéØ ADAPTACI√ìN: Actualizar idioma din√°micamente"""
        if nuevo_idioma:
            self.idioma_usuario = nuevo_idioma
        
        traducciones = {
            'volver': {'es': 'üîô Volver', 'en': 'üîô Back'},
            'nuevos_temas': {'es': 'üîÑ Nuevos Temas', 'en': 'üîÑ New Topics'},
            'buscar': {'es': 'üîç Buscar', 'en': 'üîç Search'}
        }
        
        idioma = self.idioma_usuario.lower().strip()
        
        if hasattr(self, 'btn_volver'):
            self.btn_volver.text = traducciones['volver'].get(idioma, 'üîô Volver')
        if hasattr(self, 'btn_nuevas_sugerencias'):
            self.btn_nuevas_sugerencias.text = traducciones['nuevos_temas'].get(idioma, 'üîÑ Nuevos Temas')
        if hasattr(self, 'btn_buscar'):
            self.btn_buscar.text = traducciones['buscar'].get(idioma, 'üîç Buscar')
        
        print(f"‚úÖ Idioma actualizado en Temas Profundos: {idioma}")

    def cargar_temas_desde_directorio_profundos(self):
        """üéØ ADAPTACI√ìN: Cargar temas desde archivos con soporte m√∫ltiple"""
        try:
            directorio_temas = os.path.join('datos', 'temas_profundos')
            
            if not os.path.exists(directorio_temas):
                print("üìÅ Creando directorio de temas profundos...")
                os.makedirs(directorio_temas, exist_ok=True)
                self.crear_archivos_ejemplo_profundos()
            
            todos_los_temas = []
            
            # üéØ SOPORTE PARA .json Y .txt
            for archivo in os.listdir(directorio_temas):
                if archivo.endswith('.json'):
                    try:
                        ruta_archivo = os.path.join(directorio_temas, archivo)
                        with open(ruta_archivo, 'r', encoding='utf-8') as file:
                            data = json.load(file)
                        
                        if isinstance(data, list):
                            todos_los_temas.extend(data)
                        elif isinstance(data, dict):
                            todos_los_temas.append(data)
                            
                    except Exception as e:
                        print(f"‚ö†Ô∏è Error cargando {archivo}: {e}")
                        continue
                        
                elif archivo.endswith('.txt'):
                    # üÜï SOPORTE: Archivos .txt convertidos a formato de tema
                    try:
                        ruta_archivo = os.path.join(directorio_temas, archivo)
                        with open(ruta_archivo, 'r', encoding='utf-8') as file:
                            contenido = file.read().strip()
                        
                        if contenido:
                            tema_convertido = self.convertir_txt_a_tema(archivo, contenido)
                            todos_los_temas.append(tema_convertido)
                            
                    except Exception as e:
                        print(f"‚ö†Ô∏è Error cargando archivo .txt {archivo}: {e}")
                        continue
            
            print(f"üìö Temas profundos cargados: {len(todos_los_temas)}")
            return todos_los_temas
            
        except Exception as e:
            print(f"‚ùå Error cargando temas profundos: {e}")
            return []

    def convertir_txt_a_tema(self, nombre_archivo, contenido):
        """üÜï UTILIDAD: Convertir archivo .txt a formato de tema"""
        titulo_base = nombre_archivo.replace('.txt', '').replace('_', ' ').title()
        
        return {
            'titulo': {
                'es': titulo_base,
                'en': titulo_base  # Para archivos .txt, usar el mismo t√≠tulo
            },
            'contenido': {
                'es': contenido,
                'en': contenido  # Para archivos .txt, usar el mismo contenido
            },
            'conclusion': {
                'es': "Tema para estudio profundo.",
                'en': "Topic for deep study."
            },
            'fuente': nombre_archivo
        }

    def crear_archivos_ejemplo_profundos(self):
        """üéØ ADAPTACI√ìN: Crear archivos de ejemplo"""
        try:
            directorio = os.path.join('datos', 'temas_profundos')
            
            # Archivo JSON de ejemplo
            ejemplo_json = [
                {
                    "titulo": {
                        "es": "La Soberan√≠a de Jehov√°",
                        "en": "Jehovah's Sovereignty"
                    },
                    "contenido": {
                        "es": "Jehov√° ejerce su soberan√≠a con sabidur√≠a y amor. Su dominio abarca toda la creaci√≥n y se manifiesta a trav√©s de sus leyes y principios eternos.",
                        "en": "Jehovah exercises his sovereignty with wisdom and love. His dominion encompasses all creation and is manifested through his eternal laws and principles."
                    },
                    "conclusion": {
                        "es": "Reconocer la soberan√≠a divina nos ayuda a confiar en el prop√≥sito eterno de Dios.",
                        "en": "Recognizing divine sovereignty helps us trust in God's eternal purpose."
                    }
                }
            ]
            
            ruta_json = os.path.join(directorio, 'temas_profundos_ejemplo.json')
            with open(ruta_json, 'w', encoding='utf-8') as f:
                json.dump(ejemplo_json, f, indent=2, ensure_ascii=False)
            
            print("‚úÖ Archivo de ejemplo creado: temas_profundos_ejemplo.json")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error creando archivos de ejemplo: {e}")

    def cargar_todos_los_temas(self):
        """üéØ FUNCI√ìN PRINCIPAL: Cargar todos los temas disponibles"""
        self.todos_los_temas = self.cargar_temas_desde_directorio_profundos()
        
        # Si no hay temas desde archivos, usar predeterminados
        if not self.todos_los_temas:
            self.todos_los_temas = self.obtener_preguntas_predeterminadas()

    def obtener_temas_no_mostrados(self, cantidad):
        """üéØ L√ìGICA: Obtener temas que no se han mostrado"""
        if not self.todos_los_temas:
            return []
        
        temas_disponibles = [tema for tema in self.todos_los_temas if tema not in self.temas_mostrados]
        
        if len(temas_disponibles) < cantidad:
            random.shuffle(self.todos_los_temas)
            self.temas_mostrados = []
            temas_disponibles = self.todos_los_temas
        
        temas_seleccionados = temas_disponibles[:cantidad]
        self.temas_mostrados.extend(temas_seleccionados)
        
        return temas_seleccionados

    def obtener_preguntas_predeterminadas(self):
        """üéØ RESPALDO: Temas predeterminados si no hay archivos"""
        return [
            {
                "titulo": {"es": "¬øC√≥mo mantener la esperanza cristiana?", "en": "How to maintain Christian hope?"}, 
                "contenido": {"es": "La esperanza cristiana se basa en las promesas de Dios registradas en su Palabra. A trav√©s de la oraci√≥n constante, el estudio regular de las Escrituras y la asociaci√≥n con otros creyentes, podemos fortalecer nuestra esperanza.", "en": "Christian hope is based on God's promises recorded in his Word. Through constant prayer, regular study of the Scriptures, and association with other believers, we can strengthen our hope."}, 
                "conclusion": {"es": "La esperanza fortalece nuestra fe y nos ayuda a perseverar en tiempos dif√≠ciles.", "en": "Hope strengthens our faith and helps us persevere in difficult times."}
            },
            {
                "titulo": {"es": "¬øQu√© significa la vida eterna?", "en": "What does eternal life mean?"}, 
                "contenido": {"es": "La vida eterna no es solo vida sin fin, sino vida de calidad suprema bajo el Reino de Dios. Incluye perfecta salud, paz completa y una relaci√≥n armoniosa con nuestro Creador.", "en": "Eternal life is not just endless life, but life of supreme quality under God's Kingdom. It includes perfect health, complete peace, and a harmonious relationship with our Creator."}, 
                "conclusion": {"es": "La vida eterna es el regalo m√°s grande que Dios ofrece a los que le son fieles.", "en": "Eternal life is the greatest gift God offers to those who are faithful to him."}
            },
            {
                "titulo": {"es": "¬øC√≥mo enfrentar las pruebas con fe?", "en": "How to face trials with faith?"}, 
                "contenido": {"es": "Las pruebas son oportunidades para demostrar nuestra fe en Jehov√°. Cuando confiamos en su sabidur√≠a y poder, encontramos la fuerza necesaria para superar cualquier dificultad.", "en": "Trials are opportunities to demonstrate our faith in Jehovah. When we trust in his wisdom and power, we find the strength needed to overcome any difficulty."}, 
                "conclusion": {"es": "Las pruebas, aunque dif√≠ciles, nos fortalecen y refinan nuestro car√°cter cristiano.", "en": "Trials, though difficult, strengthen us and refine our Christian character."}
            },
            {
                "titulo": {"es": "El poder del perd√≥n cristiano", "en": "The power of Christian forgiveness"}, 
                "contenido": {"es": "El perd√≥n es una caracter√≠stica fundamental del cristianismo. Seguimos el ejemplo de Jes√∫s al perdonar de coraz√≥n, liber√°ndonos del resentimiento y promoviendo la paz.", "en": "Forgiveness is a fundamental characteristic of Christianity. We follow Jesus' example by forgiving from the heart, freeing ourselves from resentment and promoting peace."}, 
                "conclusion": {"es": "El perd√≥n sincero trae sanidad emocional y fortalece nuestras relaciones.", "en": "Sincere forgiveness brings emotional healing and strengthens our relationships."}
            },
            {
                "titulo": {"es": "La importancia de la humildad cristiana", "en": "The importance of Christian humility"}, 
                "contenido": {"es": "La humildad nos ayuda a reconocer nuestra dependencia de Dios y a tratar a otros con respeto y consideraci√≥n. Es una cualidad que Jehov√° valora profundamente.", "en": "Humility helps us recognize our dependence on God and treat others with respect and consideration. It is a quality that Jehovah deeply values."}, 
                "conclusion": {"es": "La humildad genuina agrada a Dios y nos acerca m√°s a √©l.", "en": "Genuine humility pleases God and draws us closer to him."}
            }
        ]
        
    def cargar_temas_iniciales(self):
        """üéØ FUNCI√ìN: Cargar temas iniciales en la interfaz"""
        self.content_layout.clear_widgets()
        self.temas_mostrados = []
        
        if not self.todos_los_temas:
            temas_a_mostrar = self.obtener_preguntas_predeterminadas()[:self.temas_por_pagina]
        else:
            temas_a_mostrar = self.obtener_temas_no_mostrados(self.temas_por_pagina)
        
        self.agregar_temas_a_layout(temas_a_mostrar)

    def agregar_temas_a_layout(self, temas):
        """üéØ INTERFAZ: Agregar botones de temas al layout"""
        if not temas:
            # Mostrar mensaje si no hay temas
            label_vacio = Label(
                text='No hay temas disponibles' if self.idioma_usuario == 'es' else 'No topics available',
                size_hint_y=None,
                height=dp(60),
                color=(0.5, 0.5, 0.5, 1),
                font_size='16sp'
            )
            self.content_layout.add_widget(label_vacio)
            return
        
        for tema in temas:
            try:
                titulo = tema.get('titulo', {})
                idioma = self.idioma_usuario.lower().strip()
                
                if isinstance(titulo, dict):
                    texto_boton = titulo.get(idioma, titulo.get('es', 'Sin t√≠tulo'))
                else:
                    texto_boton = str(titulo)
                
                texto_boton_display = f"üìö {texto_boton}"
                
                btn = Button(
                    text=texto_boton_display,
                    size_hint_y=None,
                    height=dp(70),
                    background_color=(0.2, 0.4, 0.6, 1),
                    color=(1, 1, 1, 1),
                    text_size=(dp(280), None),
                    halign='left',
                    valign='middle',
                    font_size='14sp'
                )
                btn.bind(on_press=lambda x, t=tema: self.mostrar_detalle_tema_profundo(t))
                self.content_layout.add_widget(btn)
                
            except Exception as e:
                print(f"‚ö†Ô∏è Error procesando tema: {e}")
                continue

    def mostrar_detalle_tema_profundo(self, tema):
        """üéØ FUNCI√ìN PRINCIPAL: Mostrar detalle del tema en popup"""
        print(f"üìñ Mostrando tema profundo...")
        
        # üÜï INTEGRACI√ìN: Registrar consulta en historial
        self.registrar_consulta_tema(tema)
        
        idioma = self.idioma_usuario.lower().strip()
        
        # Extraer informaci√≥n del tema
        titulo = tema.get('titulo', {})
        if isinstance(titulo, dict):
            titulo_texto = titulo.get(idioma, titulo.get('es', 'Sin t√≠tulo'))
        else:
            titulo_texto = str(titulo)
        
        contenido = tema.get('contenido', {})
        if isinstance(contenido, dict):
            contenido_texto = contenido.get(idioma, contenido.get('es', 'Sin contenido'))
        else:
            contenido_texto = str(contenido)
        
        conclusion = tema.get('conclusion', {})
        if isinstance(conclusion, dict):
            conclusion_texto = conclusion.get(idioma, conclusion.get('es', ''))
        else:
            conclusion_texto = str(conclusion) if conclusion else ''
        
        # Construir texto completo
        lineas = [f"üìö {titulo_texto}", ""]
        
        if contenido_texto:
            intro_label = "üìñ Contenido:" if idioma == 'es' else "üìñ Content:"
            lineas.extend([intro_label, "", contenido_texto, ""])
        
        if conclusion_texto:
            concl_label = "‚ú® Conclusi√≥n:" if idioma == 'es' else "‚ú® Conclusion:"
            lineas.extend([concl_label, "", conclusion_texto])
        
        texto_completo = "\n".join(lineas)
        
        # Crear popup
        content = BoxLayout(orientation='vertical', spacing=dp(10), padding=dp(15))
        
        container = BoxLayout(orientation='vertical', size_hint_y=None, spacing=dp(5))
        container.bind(minimum_height=container.setter('height'))
        
        label_contenido = Label(
            text=texto_completo,
            text_size=(dp(300), None),
            halign='left',
            valign='top',
            markup=False,
            color=(1, 1, 1, 1),  # Texto blanco para mejor legibilidad
            font_size='14sp',
            size_hint_y=None
        )
        label_contenido.bind(texture_size=label_contenido.setter('size'))
        
        container.add_widget(label_contenido)
        
        scroll = ScrollView(do_scroll_x=False, do_scroll_y=True)
        scroll.add_widget(container)
        content.add_widget(scroll)
        
        # Botones
        botones_layout = BoxLayout(
            orientation='horizontal', 
            spacing=dp(10), 
            size_hint_y=None, 
            height=dp(50)
        )
        
        btn_copiar = Button(
            text='üìã Copiar' if idioma == 'es' else 'üìã Copy',
            background_color=(0.3, 0.6, 0.3, 1),
            color=(1, 1, 1, 1),
            font_size='14sp'
        )
        btn_copiar.bind(on_press=lambda x: self.copiar_tema(texto_completo))
        botones_layout.add_widget(btn_copiar)
        
        btn_cerrar = Button(
            text='‚ùå Cerrar' if idioma == 'es' else '‚ùå Close',
            background_color=(0.6, 0.3, 0.3, 1),
            color=(1, 1, 1, 1),
            font_size='14sp'
        )
        botones_layout.add_widget(btn_cerrar)
        
        content.add_widget(botones_layout)
        
        popup_titulo = titulo_texto if len(titulo_texto) < 25 else titulo_texto[:22] + "..."
        popup = Popup(
            title=f"üìö {popup_titulo}",
            content=content,
            size_hint=(0.95, 0.8),
            auto_dismiss=True,
            separator_color=[0.2, 0.4, 0.6, 1],
            title_color=[1, 1, 1, 1],
            title_size='16sp'
        )
        
        btn_cerrar.bind(on_press=popup.dismiss)
        
        def scroll_al_tope(*args):
            scroll.scroll_y = 1
        
        popup.bind(on_open=lambda *args: Clock.schedule_once(scroll_al_tope, 0.1))
        popup.open()

    def registrar_consulta_tema(self, tema):
        """üÜï INTEGRACI√ìN: Registrar consulta en el historial"""
        try:
            if self.historial_individual:
                titulo = tema.get('titulo', {})
                idioma = self.idioma_usuario.lower().strip()
                
                if isinstance(titulo, dict):
                    titulo_texto = titulo.get(idioma, titulo.get('es', 'Tema sin t√≠tulo'))
                else:
                    titulo_texto = str(titulo)
                
                # Registrar la consulta
                self.historial_individual.registrar_consulta(
                    consulta=f"Tema Profundo: {titulo_texto}",
                    respuesta="Tema consultado en Temas Profundos",
                    categoria="temas_profundos"
                )
                print(f"üìù Consulta registrada: {titulo_texto}")
        except Exception as e:
            print(f"‚ö†Ô∏è Error registrando consulta: {e}")

    def generar_nuevos_temas(self, instance):
        """üéØ FUNCI√ìN: Generar nuevos temas aleatorios"""
        print("üîÑ Generando nuevos temas...")
        
        if self.todos_los_temas:
            random.shuffle(self.todos_los_temas)
        
        self.temas_mostrados = []
        self.cargar_temas_iniciales()

    def mostrar_busqueda(self, instance):
        """üéØ FUNCI√ìN: Mostrar popup de b√∫squeda"""
        content = BoxLayout(orientation='vertical', spacing=dp(10), padding=dp(10))
        
        idioma = self.idioma_usuario.lower().strip()
        instrucciones = {
            'es': 'üîç Escriba una palabra clave para buscar en temas profundos:',
            'en': 'üîç Enter a keyword to search in deep topics:'
        }
        texto_instrucciones = instrucciones.get(idioma, instrucciones['es'])
        
        label_instrucciones = Label(
            text=texto_instrucciones,
            size_hint_y=None,
            height=dp(60),
            text_size=(dp(300), None),
            halign='center',
            color=(0, 0, 0, 1),
            font_size='14sp'
        )
        content.add_widget(label_instrucciones)
        
        self.input_busqueda = TextInput(
            hint_text='Palabra clave...' if idioma == 'es' else 'Keyword...',
            size_hint_y=None,
            height=dp(40),
            multiline=False,
            foreground_color=(0, 0, 0, 1),
            background_color=(0.95, 0.95, 0.95, 1)
        )
        content.add_widget(self.input_busqueda)
        
        botones_layout = BoxLayout(
            orientation='horizontal', 
            spacing=dp(10), 
            size_hint_y=None, 
            height=dp(50)
        )
        
        btn_buscar_popup = Button(
            text='üîç Buscar' if idioma == 'es' else 'üîç Search',
            background_color=(0.3, 0.6, 0.3, 1),
            color=(1, 1, 1, 1)
        )
        btn_buscar_popup.bind(on_press=self.ejecutar_busqueda_profundos)
        botones_layout.add_widget(btn_buscar_popup)
        
        btn_cancelar = Button(
            text='‚ùå Cancelar' if idioma == 'es' else '‚ùå Cancel',
            background_color=(0.6, 0.3, 0.3, 1),
            color=(1, 1, 1, 1)
        )
        btn_cancelar.bind(on_press=self.cerrar_popup_busqueda)
        botones_layout.add_widget(btn_cancelar)
        
        content.add_widget(botones_layout)
        
        titulo_popup = 'üîç Buscar Temas Profundos' if idioma == 'es' else 'üîç Search Deep Topics'
        self.popup_busqueda = Popup(
            title=titulo_popup,
            content=content,
            size_hint=(0.9, 0.5),
            auto_dismiss=False
        )
        self.popup_busqueda.open()

    def ejecutar_busqueda_profundos(self, instance):
        """üéØ FUNCI√ìN: Ejecutar b√∫squeda en temas profundos"""
        palabra_clave = self.input_busqueda.text.strip().lower()
        
        if not palabra_clave:
            return
        
        self.popup_busqueda.dismiss()
        
        print(f"üîç Buscando: {palabra_clave}")
        
        # üÜï INTEGRACI√ìN: Registrar b√∫squeda en historial
        self.registrar_busqueda(palabra_clave)
        
        resultados = self.buscar_en_temas(palabra_clave)
        self.mostrar_resultados_busqueda(resultados, palabra_clave)

    def cerrar_popup_busqueda(self, instance):
        """üéØ FUNCI√ìN: Cerrar popup de b√∫squeda"""
        self.popup_busqueda.dismiss()

    def buscar_en_temas(self, palabra_clave):
        """üéØ FUNCI√ìN: Buscar palabra clave en todos los temas"""
        resultados = []
        palabra_clave = palabra_clave.lower()
        
        todos_los_temas = self.todos_los_temas if self.todos_los_temas else self.obtener_preguntas_predeterminadas()
        
        for tema in todos_los_temas:
            # Buscar en t√≠tulo
            titulo = tema.get('titulo', {})
            if isinstance(titulo, dict):
                for idioma, texto in titulo.items():
                    if palabra_clave in texto.lower():
                        resultados.append(tema)
                        break
            else:
                if palabra_clave in str(titulo).lower():
                    resultados.append(tema)
                    continue
            
            # Buscar en contenido
            contenido = tema.get('contenido', {})
            if isinstance(contenido, dict):
                for idioma, texto in contenido.items():
                    if palabra_clave in texto.lower():
                        if tema not in resultados:
                            resultados.append(tema)
                        break
            else:
                if palabra_clave in str(contenido).lower():
                    if tema not in resultados:
                        resultados.append(tema)
        
        return resultados

    def mostrar_resultados_busqueda(self, resultados, palabra_clave):
        """üéØ FUNCI√ìN: Mostrar resultados de b√∫squeda"""
        self.content_layout.clear_widgets()
        
        # T√≠tulo de resultados
        idioma = self.idioma_usuario.lower().strip()
        if resultados:
            texto_titulo = f"üîç Resultados para '{palabra_clave}': {len(resultados)}" if idioma == 'es' else f"üîç Results for '{palabra_clave}': {len(resultados)}"
        else:
            texto_titulo = f"üîç Sin resultados para '{palabra_clave}'" if idioma == 'es' else f"üîç No results for '{palabra_clave}'"
        
        titulo_resultados = Label(
            text=texto_titulo,
            size_hint_y=None,
            height=dp(50),
            color=(0, 0, 0, 1),
            font_size='16sp',
            bold=True
        )
        self.content_layout.add_widget(titulo_resultados)
        
        if resultados:
            self.agregar_temas_a_layout(resultados)
        else:
            # Mostrar mensaje de no resultados
            mensaje_vacio = Label(
                text='No se encontraron temas que coincidan con la b√∫squeda.' if idioma == 'es' else 'No topics found matching the search.',
                size_hint_y=None,
                height=dp(60),
                color=(0.5, 0.5, 0.5, 1),
                font_size='14sp',
                text_size=(dp(280), None),
                halign='center'
            )
            self.content_layout.add_widget(mensaje_vacio)
        
        # Bot√≥n para volver a todos los temas
        btn_ver_todos = Button(
            text='üìö Ver Todos los Temas' if idioma == 'es' else 'üìö View All Topics',
            size_hint_y=None,
            height=dp(50),
            background_color=(0.4, 0.4, 0.4, 1),
            color=(1, 1, 1, 1),
            font_size='14sp'
        )
        btn_ver_todos.bind(on_press=lambda x: self.cargar_temas_iniciales())
        self.content_layout.add_widget(btn_ver_todos)

    def registrar_busqueda(self, palabra_clave):
        """üÜï INTEGRACI√ìN: Registrar b√∫squeda en historial"""
        try:
            if self.historial_individual:
                self.historial_individual.registrar_consulta(
                    consulta=f"B√∫squeda en Temas Profundos: {palabra_clave}",
                    respuesta="B√∫squeda realizada en la secci√≥n de Temas Profundos",
                    categoria="busqueda_temas_profundos"
                )
                print(f"üìù B√∫squeda registrada: {palabra_clave}")
        except Exception as e:
            print(f"‚ö†Ô∏è Error registrando b√∫squeda: {e}")

    def copiar_tema(self, texto):
        """üéØ FUNCI√ìN: Copiar tema al portapapeles"""
        try:
            # Intentar copiar al portapapeles (funcionalidad b√°sica)
            print("üìã Tema preparado para copiar")
            print(f"Contenido: {texto[:100]}...")  # Mostrar preview
        except Exception as e:
            print(f"‚ö†Ô∏è Error copiando tema: {e}")

    def ir_al_menu(self, instance=None):
        """üéØ NAVEGACI√ìN: Volver al men√∫"""
        try:
            if self.volver_callback:
                self.volver_callback()
                print("üîô Volviendo al men√∫ con callback")
            else:
                print("üîô Callback no disponible")
        except Exception as e:
            print(f"‚ùå Error volviendo al men√∫: {e}")

# FIN DE LA CLASE PantallaTemasProfundos