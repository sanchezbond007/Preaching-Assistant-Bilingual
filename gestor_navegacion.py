# gestor_navegacion.py
"""
GestorNavegacion - Sistema centralizado de navegaci√≥n para Asistente de Predicaci√≥n
Autor: Integraci√≥n con c√≥digo existente
Fecha: Junio 2025
"""

from kivy.uix.screenmanager import SlideTransition, FadeTransition, NoTransition
from kivy.clock import Clock
import time
import json
import os

class GestorNavegacion:
    """
    Gestor centralizado de navegaci√≥n que maneja todas las transiciones
    entre pantallas de manera consistente y validada.
    """
    
    def __init__(self, app_instance):
        """
        Inicializa el gestor de navegaci√≥n
        
        Args:
            app_instance: Instancia de la aplicaci√≥n Kivy principal
        """
        self.app = app_instance
        self.inicializar_configuracion()
        
        print("üß≠ GestorNavegacion inicializado")
    
    def inicializar_configuracion(self):
        """Inicializa la configuraci√≥n del gestor"""
        
        # Configuraciones de transici√≥n
        self.transiciones_disponibles = {
            'slide': SlideTransition,
            'fade': FadeTransition, 
            'none': NoTransition
        }
        
        # Configuraciones personalizadas por ruta
        self.configuraciones_navegacion = {
            # Flujo principal
            'aviso_legal->login': {
                'transicion': 'slide',
                'direccion': 'left',
                'duracion': 0.3,
                'validaciones': []
            },
            'login->send_resume': {
                'transicion': 'slide', 
                'direccion': 'left',
                'duracion': 0.3,
                'validaciones': ['usuario_autenticado']
            },
            'send_resume->menu': {
                'transicion': 'slide',
                'direccion': 'left', 
                'duracion': 0.3,
                'validaciones': ['usuario_autenticado']
            },
            
            # Navegaci√≥n desde men√∫
            'menu->*': {  # Comod√≠n para cualquier pantalla desde men√∫
                'transicion': 'slide',
                'direccion': 'left',
                'duracion': 0.3,
                'validaciones': ['usuario_autenticado']
            },
            
            # Vuelta al men√∫
            '*->menu': {  # Comod√≠n para volver al men√∫
                'transicion': 'slide', 
                'direccion': 'right',
                'duracion': 0.3,
                'validaciones': ['usuario_autenticado']
            }
        }
        
        # Validadores disponibles
        self.validadores = {
            'usuario_autenticado': self._validar_usuario_autenticado,
            'pantalla_existe': self._validar_pantalla_existe,
            'gestor_temas_disponible': self._validar_gestor_temas
        }
        
        # Interceptores (funciones que se ejecutan antes/despu√©s de navegar)
        self.interceptores_pre = []
        self.interceptores_post = []
        
        # Historial de navegaci√≥n
        self.historial = []
        self.indice_historial = -1
        
        # Estado interno
        self.navegacion_en_progreso = False
        self.pantalla_anterior = None
    
    def navegar_a(self, destino, datos=None, transicion_personalizada=None, forzar=False):
        """
        Navega a una pantalla espec√≠fica con validaciones y configuraciones.
        
        Args:
            destino (str): Nombre de la pantalla destino
            datos (dict): Datos opcionales para pasar a la pantalla
            transicion_personalizada (dict): Configuraci√≥n espec√≠fica de transici√≥n
            forzar (bool): Si True, ignora las validaciones
            
        Returns:
            bool: True si la navegaci√≥n fue exitosa, False si fall√≥
        """
        
        if self.navegacion_en_progreso:
            print("‚ö†Ô∏è Navegaci√≥n ya en progreso, ignorando solicitud")
            return False
        
        print(f"üß≠ === NAVEGANDO A: {destino} ===")
        
        try:
            self.navegacion_en_progreso = True
            
            # 1. Validaciones previas
            if not forzar and not self._ejecutar_validaciones(destino):
                print(f"‚ùå Validaciones fallaron para '{destino}'")
                return False
            
            # 2. Ejecutar interceptores pre-navegaci√≥n
            if not self._ejecutar_interceptores_pre(destino, datos):
                print(f"‚ùå Interceptores pre-navegaci√≥n fallaron para '{destino}'")
                return False
            
            # 3. Preparar pantalla destino
            self._preparar_pantalla_destino(destino, datos)
            
            # 4. Configurar y aplicar transici√≥n
            self._aplicar_transicion(destino, transicion_personalizada)
            
            # 5. Realizar navegaci√≥n
            pantalla_origen = self.app.root.current
            self.app.root.current = destino
            
            # 6. Actualizar estado y historial
            self._actualizar_estado_navegacion(pantalla_origen, destino)
            
            # 7. Ejecutar interceptores post-navegaci√≥n (as√≠ncrono)
            Clock.schedule_once(lambda dt: self._ejecutar_interceptores_post(destino, datos), 0.1)
            
            print(f"‚úÖ Navegaci√≥n a '{destino}' completada exitosamente")
            return True
            
        except Exception as e:
            print(f"‚ùå Error durante navegaci√≥n a '{destino}': {e}")
            return False
        finally:
            self.navegacion_en_progreso = False
    
    def volver_atras(self):
        """Vuelve a la pantalla anterior en el historial"""
        if self.indice_historial > 0:
            entrada_anterior = self.historial[self.indice_historial - 1]
            return self.navegar_a(entrada_anterior['pantalla'], forzar=True)
        else:
            print("‚ö†Ô∏è No hay pantalla anterior en el historial")
            return False
    
    def ir_al_menu(self):
        """M√©todo de conveniencia para ir al men√∫ principal"""
        return self.navegar_a('menu')
    
    def ir_al_login(self):
        """M√©todo de conveniencia para ir al login (logout)"""
        # Limpiar estado de usuario
        if hasattr(self.app, 'estado_app'):
            self.app.estado_app['usuario_actual'] = None
            self.app.estado_app['sesion_activa'] = False
        
        return self.navegar_a('login', forzar=True)
    
    # === M√âTODOS PRIVADOS ===
    
    def _ejecutar_validaciones(self, destino):
        """Ejecuta todas las validaciones para la navegaci√≥n"""
        
        pantalla_actual = self.app.root.current
        ruta = f"{pantalla_actual}->{destino}"
        
        # Buscar configuraci√≥n espec√≠fica
        config = self.configuraciones_navegacion.get(ruta)
        if not config:
            # Buscar configuraci√≥n con comod√≠n
            config = self._buscar_configuracion_comodin(pantalla_actual, destino)
        
        if not config:
            print(f"‚ÑπÔ∏è Sin configuraci√≥n espec√≠fica para '{ruta}', usando validaciones por defecto")
            config = {'validaciones': ['pantalla_existe']}
        
        # Ejecutar validaciones
        for validacion in config.get('validaciones', []):
            if validacion in self.validadores:
                if not self.validadores[validacion](destino):
                    print(f"‚ùå Validaci√≥n '{validacion}' fall√≥ para '{destino}'")
                    return False
            else:
                print(f"‚ö†Ô∏è Validador '{validacion}' no encontrado")
        
        return True
    
    def _buscar_configuracion_comodin(self, origen, destino):
        """Busca configuraci√≥n usando comodines"""
        
        # Buscar origen->*
        config_origen = self.configuraciones_navegacion.get(f"{origen}->*")
        if config_origen:
            return config_origen
        
        # Buscar *->destino
        config_destino = self.configuraciones_navegacion.get(f"*->{destino}")
        if config_destino:
            return config_destino
        
        return None
    
    def _validar_usuario_autenticado(self, destino):
        """Valida que el usuario est√© autenticado"""
        if hasattr(self.app, 'estado_app'):
            return self.app.estado_app.get('sesion_activa', False)
        
        # Fallback: verificar si existe archivo de sesi√≥n
        return os.path.exists('usuarios_registrados.json')
    
    def _validar_pantalla_existe(self, destino):
        """Valida que la pantalla destino exista"""
        try:
            self.app.root.get_screen(destino)
            return True
        except:
            print(f"‚ùå Pantalla '{destino}' no existe")
            return False
    
    def _validar_gestor_temas(self, destino):
        """Valida que el gestor de temas est√© disponible"""
        return hasattr(self.app, 'gestor_temas') and self.app.gestor_temas is not None
    
    def _ejecutar_interceptores_pre(self, destino, datos):
        """Ejecuta interceptores antes de la navegaci√≥n"""
        for interceptor in self.interceptores_pre:
            try:
                if not interceptor(self.app.root.current, destino, datos):
                    return False
            except Exception as e:
                print(f"‚ùå Error en interceptor pre-navegaci√≥n: {e}")
                return False
        return True
    
    def _ejecutar_interceptores_post(self, destino, datos):
        """Ejecuta interceptores despu√©s de la navegaci√≥n"""
        for interceptor in self.interceptores_post:
            try:
                interceptor(self.pantalla_anterior, destino, datos)
            except Exception as e:
                print(f"‚ö†Ô∏è Error en interceptor post-navegaci√≥n: {e}")
    
    def _preparar_pantalla_destino(self, destino, datos):
        """Prepara la pantalla destino antes de mostrarla"""
        try:
            pantalla = self.app.root.get_screen(destino)
            
            # Actualizar idioma si la pantalla lo soporta
            if hasattr(pantalla, 'actualizar_idioma') and hasattr(self.app, 'idioma_actual'):
                pantalla.actualizar_idioma(self.app.idioma_actual)
            elif hasattr(pantalla, 'configurar_idioma') and hasattr(self.app, 'idioma_actual'):
                pantalla.configurar_idioma(self.app.idioma_actual)
            
            # Pasar datos si la pantalla lo soporta
            if datos and hasattr(pantalla, 'recibir_datos'):
                pantalla.recibir_datos(datos)
            
            # Configurar navegaci√≥n si la pantalla lo necesita
            if hasattr(pantalla, 'configurar_navegacion'):
                pantalla.configurar_navegacion(self.navegar_a)
            
            # Configurar callback espec√≠ficos
            self._configurar_callbacks_pantalla(pantalla, destino)
            
            print(f"‚úÖ Pantalla '{destino}' preparada correctamente")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error preparando pantalla '{destino}': {e}")
    
    def _configurar_callbacks_pantalla(self, pantalla, nombre_pantalla):
        """Configura callbacks espec√≠ficos seg√∫n el tipo de pantalla"""
        
        if nombre_pantalla == 'send_resume':
            # Configurar callback para volver al men√∫
            if hasattr(pantalla, 'configurar_callback_menu'):
                pantalla.configurar_callback_menu(self.ir_al_menu)
        
        elif nombre_pantalla == 'menu':
            # Configurar navegaci√≥n del men√∫
            if hasattr(pantalla, 'configurar_navegacion'):
                pantalla.configurar_navegacion(self._manejar_navegacion_menu)
        
        elif nombre_pantalla in ['schedule_reminder', 'mis_recordatorios']:
            # Configurar callback para volver al men√∫ en recordatorios
            if hasattr(pantalla, 'configurar_callback_volver'):
                pantalla.configurar_callback_volver(self.ir_al_menu)
    
    def _manejar_navegacion_menu(self, destino):
        """Maneja la navegaci√≥n espec√≠fica desde el men√∫"""
        
        # Mapeo de destinos del men√∫ a pantallas reales
        mapeo_pantallas = {
            'sugerencias': 'sugerencias',
            'buscar_temas': 'buscar_temas',
            'temas_profundos': 'temas_profundos', 
            'send_resume': 'send_resume',
            'schedule_reminder': 'schedule_reminder',
            'mis_recordatorios': 'mis_recordatorios'
        }
        
        pantalla_real = mapeo_pantallas.get(destino, destino)
        
        # Verificar disponibilidad
        if self._validar_pantalla_existe(pantalla_real):
            # Preparar datos de contexto
            datos_contexto = {
                'origen': 'menu',
                'usuario': getattr(self.app, 'usuario_actual', None),
                'idioma': getattr(self.app, 'idioma_actual', 'es')
            }
            
            return self.navegar_a(pantalla_real, datos_contexto)
        else:
            print(f"‚ö†Ô∏è Funcionalidad '{destino}' no est√° disponible")
            return False
    
    def _aplicar_transicion(self, destino, transicion_personalizada):
        """Aplica la transici√≥n configurada"""
        
        pantalla_actual = self.app.root.current
        ruta = f"{pantalla_actual}->{destino}"
        
        # Determinar configuraci√≥n de transici√≥n
        config = transicion_personalizada
        if not config:
            config = self.configuraciones_navegacion.get(ruta, {})
            if not config:
                config = self._buscar_configuracion_comodin(pantalla_actual, destino) or {}
        
        # Aplicar configuraci√≥n
        tipo_transicion = config.get('transicion', 'slide')
        direccion = config.get('direccion', 'left')
        duracion = config.get('duracion', 0.3)
        
        # Crear y configurar transici√≥n
        if tipo_transicion in self.transiciones_disponibles:
            transicion = self.transiciones_disponibles[tipo_transicion]()
            
            if hasattr(transicion, 'direction'):
                transicion.direction = direccion
            if hasattr(transicion, 'duration'):
                transicion.duration = duracion
            
            self.app.root.transition = transicion
            
            print(f"üé¨ Transici√≥n aplicada: {tipo_transicion} ({direccion}, {duracion}s)")
        else:
            print(f"‚ö†Ô∏è Tipo de transici√≥n '{tipo_transicion}' no reconocido")
    
    def _actualizar_estado_navegacion(self, origen, destino):
        """Actualiza el estado interno despu√©s de la navegaci√≥n"""
        
        self.pantalla_anterior = origen
        
        # Agregar al historial
        entrada_historial = {
            'pantalla': destino,
            'timestamp': time.time(),
            'origen': origen,
            'usuario': getattr(self.app, 'usuario_actual', None)
        }
        
        # Mantener historial limitado
        self.historial.append(entrada_historial)
        if len(self.historial) > 50:  # L√≠mite de historial
            self.historial.pop(0)
        
        self.indice_historial = len(self.historial) - 1
        
        # Actualizar estado de la app si existe
        if hasattr(self.app, 'estado_app'):
            self.app.estado_app['pantalla_actual'] = destino
            self.app.estado_app['historial_navegacion'] = self.historial[-10:]  # √öltimas 10
        
        print(f"üìä Estado actualizado: {origen} ‚Üí {destino}")
    
    # === M√âTODOS P√öBLICOS DE CONFIGURACI√ìN ===
    
    def agregar_validador(self, nombre, funcion_validador):
        """Agrega un validador personalizado"""
        self.validadores[nombre] = funcion_validador
        print(f"‚úÖ Validador '{nombre}' agregado")
    
    def agregar_interceptor_pre(self, funcion_interceptor):
        """Agrega un interceptor que se ejecuta antes de navegar"""
        self.interceptores_pre.append(funcion_interceptor)
        print("‚úÖ Interceptor pre-navegaci√≥n agregado")
    
    def agregar_interceptor_post(self, funcion_interceptor):
        """Agrega un interceptor que se ejecuta despu√©s de navegar"""
        self.interceptores_post.append(funcion_interceptor)
        print("‚úÖ Interceptor post-navegaci√≥n agregado")
    
    def configurar_ruta(self, origen, destino, configuracion):
        """Configura una ruta espec√≠fica de navegaci√≥n"""
        ruta = f"{origen}->{destino}"
        self.configuraciones_navegacion[ruta] = configuracion
        print(f"‚úÖ Ruta '{ruta}' configurada")
    
    def obtener_historial(self, limite=10):
        """Obtiene el historial de navegaci√≥n"""
        return self.historial[-limite:] if limite else self.historial
    
    def limpiar_historial(self):
        """Limpia el historial de navegaci√≥n"""
        self.historial.clear()
        self.indice_historial = -1
        print("üóëÔ∏è Historial de navegaci√≥n limpiado")


# === INTEGRACI√ìN CON TU C√ìDIGO ACTUAL ===

def integrar_gestor_navegacion(app_instance):
    """
    Funci√≥n de integraci√≥n para agregar el gestor a tu aplicaci√≥n existente
    sin romper el c√≥digo actual.
    """
    
    print("üîß === INTEGRANDO GESTOR DE NAVEGACI√ìN ===")
    
    # Crear el gestor
    gestor = GestorNavegacion(app_instance)
    
    # Agregar a la aplicaci√≥n
    app_instance.gestor_navegacion = gestor
    
    # Configurar interceptores √∫tiles
    def interceptor_logging(origen, destino, datos):
        print(f"üìä Navegaci√≥n registrada: {origen} ‚Üí {destino}")
        return True
    
    def interceptor_guardar_estado(origen, destino, datos):
        """Interceptor para guardar estado antes de navegar"""
        try:
            pantalla_origen = app_instance.root.get_screen(origen)
            if hasattr(pantalla_origen, 'guardar_estado'):
                pantalla_origen.guardar_estado()
        except:
            pass
        return True
    
    gestor.agregar_interceptor_pre(interceptor_guardar_estado)
    gestor.agregar_interceptor_post(interceptor_logging)
    
    # Configurar validaciones espec√≠ficas para tu app
    def validar_datos_interesado():
        """Validador para pantallas que requieren datos del interesado"""
        return hasattr(app_instance, 'gestor_temas') and app_instance.gestor_temas is not None
    
    gestor.agregar_validador('datos_interesado', validar_datos_interesado)
    
    # Configurar rutas espec√≠ficas de tu aplicaci√≥n
    gestor.configurar_ruta('send_resume', 'menu', {
        'transicion': 'slide',
        'direccion': 'right',
        'duracion': 0.3,
        'validaciones': ['usuario_autenticado']
    })
    
    print("‚úÖ GestorNavegacion integrado exitosamente")
    return gestor


# === EJEMPLO DE USO CON TU C√ìDIGO ===

"""
# En tu AsistentePredicacionApp.build():

def build(self):
    # ... tu c√≥digo actual ...
    
    # Agregar esta l√≠nea despu√©s de crear el screen manager:
    self.gestor_navegacion = integrar_gestor_navegacion(self)
    
    # ... resto de tu c√≥digo ...

# Reemplazar navegaciones directas:

# ANTES:
def callback_login_exitoso(self, usuario, idioma):
    self.root.current = 'send_resume'

# DESPU√âS:
def callback_login_exitoso(self, usuario, idioma):
    self.gestor_navegacion.navegar_a('send_resume', {
        'usuario': usuario,
        'idioma': idioma,
        'origen': 'login'
    })

# ANTES:
def manejar_navegacion(self, destino):
    self.root.current = destino

# DESPU√âS:
def manejar_navegacion(self, destino):
    return self.gestor_navegacion.navegar_a(destino)
"""
# gestor_navegacion_simple.py
"""
GestorNavegacion - Versi√≥n SIMPLE y SEGURA
Solo mejora tu c√≥digo actual sin romper nada
"""

class GestorNavegacionSimple:
    """
    Versi√≥n simple del gestor que solo mejora tu c√≥digo actual
    sin agregar complejidad que pueda causar errores.
    """
    
    def __init__(self, app_instance):
        self.app = app_instance
        self.historial = []
        print("üß≠ GestorNavegacion Simple inicializado")
    
    def navegar_a(self, destino, datos=None):
        """
        Navegaci√≥n simple con validaci√≥n b√°sica
        """
        try:
            print(f"üß≠ Navegando a: {destino}")
            
            # Validaci√≥n b√°sica: ¬øexiste la pantalla?
            try:
                self.app.root.get_screen(destino)
            except:
                print(f"‚ùå Pantalla '{destino}' no existe")
                return False
            
            # Guardar en historial
            self.historial.append({
                'de': self.app.root.current,
                'a': destino
            })
            
            # Navegaci√≥n normal (como tu c√≥digo actual)
            self.app.root.current = destino
            
            print(f"‚úÖ Navegaci√≥n a '{destino}' exitosa")
            return True
            
        except Exception as e:
            print(f"‚ùå Error navegando a '{destino}': {e}")
            return False
    
    def ir_al_menu(self):
        """M√©todo de conveniencia para ir al men√∫"""
        return self.navegar_a('menu')
    
    def obtener_historial(self):
        """Obtiene el historial simple"""
        return self.historial[-10:]  # √öltimas 10 navegaciones


# === INTEGRACI√ìN ULTRA-SIMPLE ===

def agregar_gestor_simple(app_instance):
    """
    Agrega el gestor simple SIN romper tu c√≥digo actual
    """
    try:
        # Solo crear el gestor, nada m√°s
        gestor = GestorNavegacionSimple(app_instance)
        app_instance.gestor_navegacion = gestor
        print("‚úÖ GestorNavegacion Simple agregado")
        return gestor
    except Exception as e:
        print(f"‚ùå Error agregando gestor: {e}")
        return None


# === PARA USAR EN TU C√ìDIGO ===
"""
INTEGRACI√ìN MUY SIMPLE:

1. En tu AsistentePredicacionApp.__init__():
   
   def __init__(self, **kwargs):
       super().__init__(**kwargs)
       self.idioma_actual = 'es'
       self.gestor_temas = None
       self.gestor_navegacion = None  # üÜï Agregar esta l√≠nea

2. En tu build(), al final:

   def build(self):
       # ... todo tu c√≥digo actual ...
       
       # üÜï Agregar estas l√≠neas AL FINAL:
       from gestor_navegacion_simple import agregar_gestor_simple
       self.gestor_navegacion = agregar_gestor_simple(self)
       
       return sm

3. OPCIONAL - Usar el gestor (puedes hacerlo gradualmente):

   # En lugar de:
   self.root.current = 'menu'
   
   # Puedes usar:
   if self.gestor_navegacion:
       self.gestor_navegacion.navegar_a('menu')
   else:
       self.root.current = 'menu'  # Fallback
"""