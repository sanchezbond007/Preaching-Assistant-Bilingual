#!/usr/bin/env python3
"""
Diagn√≥stico autom√°tico sin pausas interactivas
"""

import sys
import os
import importlib
import traceback
import time

def separador(titulo):
    """Crear separador visual"""
    print("\n" + "="*60)
    print(f"  {titulo}")
    print("="*60)

def paso(numero, titulo):
    """Mostrar paso del diagn√≥stico"""
    print(f"\nüìã PASO {numero}: {titulo}")
    print("-" * 40)

def diagnosticar_automatico():
    separador("DIAGN√ìSTICO AUTOM√ÅTICO - ASISTENTE PREDICACI√ìN")
    
    # PASO 1: Estructura de archivos
    paso(1, "VERIFICANDO ESTRUCTURA DE ARCHIVOS")
    
    archivos_necesarios = [
        'main.py',
        'pantallas/__init__.py',
        'pantallas/menu.py'
    ]
    
    estructura_ok = True
    for archivo in archivos_necesarios:
        if os.path.exists(archivo):
            tama√±o = os.path.getsize(archivo)
            print(f"‚úÖ {archivo:<25} ({tama√±o:>6} bytes)")
        else:
            print(f"‚ùå {archivo:<25} NO EXISTE")
            estructura_ok = False
    
    print(f"\nüìä Resultado Paso 1: {'CORRECTA' if estructura_ok else 'PROBLEMAS DETECTADOS'}")
    
    # PASO 2: Contenido __init__.py
    paso(2, "ANALIZANDO pantallas/__init__.py")
    
    try:
        with open('pantallas/__init__.py', 'rb') as f:
            contenido_bytes = f.read()
        
        with open('pantallas/__init__.py', 'r', encoding='utf-8') as f:
            contenido_texto = f.read()
        
        print(f"üìè Tama√±o: {len(contenido_bytes)} bytes")
        print(f"üìù Contenido: '{contenido_texto.strip()}'")
        
        # Verificar BOM
        if contenido_bytes.startswith(b'\xef\xbb\xbf'):
            print("‚ö†Ô∏è PROBLEMA: Archivo tiene BOM UTF-8 (puede causar problemas)")
            init_ok = False
        else:
            print("‚úÖ Sin BOM - Encoding correcto")
            init_ok = True
            
    except Exception as e:
        print(f"‚ùå Error leyendo __init__.py: {e}")
        init_ok = False
    
    print(f"\nüìä Resultado Paso 2: {'CORRECTO' if init_ok else 'PROBLEMAS DETECTADOS'}")
    
    # PASO 3: Python Path
    paso(3, "VERIFICANDO PYTHON PATH")
    
    directorio_actual = os.getcwd()
    print(f"üìÇ Directorio actual: {directorio_actual}")
    
    if directorio_actual in sys.path:
        print("‚úÖ Directorio actual est√° en sys.path")
        path_ok = True
    else:
        print("‚ö†Ô∏è Directorio actual NO est√° en sys.path")
        print("üîß Agregando directorio actual...")
        sys.path.insert(0, directorio_actual)
        print("‚úÖ Directorio agregado a sys.path")
        path_ok = True
    
    print(f"\nüìä Resultado Paso 3: {'CORRECTO' if path_ok else 'PROBLEMAS'}")
    
    # PASO 4: Limpiar cach√©
    paso(4, "LIMPIANDO CACH√â DE M√ìDULOS")
    
    modulos_pantallas = [name for name in sys.modules if 'pantallas' in name]
    if modulos_pantallas:
        print("üóëÔ∏è M√≥dulos 'pantallas' encontrados en cach√©:")
        for modulo in modulos_pantallas:
            print(f"   - {modulo}")
            del sys.modules[modulo]
        print("‚úÖ M√≥dulos removidos del cach√©")
    else:
        print("‚úÖ No hay m√≥dulos 'pantallas' en cach√©")
    
    importlib.invalidate_caches()
    print("‚úÖ Cach√© de importaci√≥n invalidado")
    
    print(f"\nüìä Resultado Paso 4: COMPLETADO")
    
    # PASO 5: IMPORTACI√ìN CR√çTICA
    paso(5, "PRUEBA DE IMPORTACI√ìN DETALLADA")
    
    try:
        print("üîÑ Intento 1: Importando m√≥dulo 'pantallas'...")
        import pantallas
        print(f"‚úÖ 'pantallas' importado exitosamente")
        print(f"   üìÅ Ubicaci√≥n: {getattr(pantallas, '__file__', 'No disponible')}")
        
        print("\nüîÑ Intento 2: Importando 'pantallas.menu'...")
        import pantallas.menu as menu_module
        print(f"‚úÖ 'pantallas.menu' importado exitosamente")
        print(f"   üìÅ Ubicaci√≥n: {getattr(menu_module, '__file__', 'No disponible')}")
        
        print("\nüîÑ Intento 3: Verificando clase 'PantallaMenu'...")
        if hasattr(menu_module, 'PantallaMenu'):
            PantallaMenu = menu_module.PantallaMenu
            print(f"‚úÖ PantallaMenu encontrada: {PantallaMenu}")
            print(f"   üè∑Ô∏è Tipo: {type(PantallaMenu)}")
            
            # Verificar herencia
            from kivy.uix.screenmanager import Screen
            if issubclass(PantallaMenu, Screen):
                print("‚úÖ PantallaMenu hereda correctamente de Screen")
                
                print("\nüîÑ Intento 4: Creando instancia de prueba...")
                try:
                    # Crear instancia con par√°metros m√≠nimos
                    instancia = PantallaMenu(name='test_diagnostico')
                    print("‚úÖ Instancia creada exitosamente")
                    print(f"   üè∑Ô∏è Tipo de instancia: {type(instancia)}")
                    print(f"   üìõ Nombre asignado: {instancia.name}")
                    
                    # Verificar que tiene widgets
                    print(f"   üß© Widgets hijos: {len(instancia.children)}")
                    
                    separador("üéâ DIAGN√ìSTICO: ¬°TODO FUNCIONA PERFECTAMENTE!")
                    print("\n‚úÖ Tu menu.py se importa correctamente")
                    print("‚úÖ PantallaMenu se puede instanciar sin problemas")
                    print("‚úÖ El problema DEBE ESTAR en main.py")
                    print("\nüîß SOLUCI√ìN: El problema est√° en c√≥mo main.py usa tu men√∫")
                    print("üîß Ejecuta: python main_corregido.py para ver la soluci√≥n")
                    
                    return True, "IMPORTACI√ìN PERFECTA"
                    
                except Exception as e:
                    print(f"‚ùå Error creando instancia: {type(e).__name__}: {e}")
                    print("\nüìã Detalles del error:")
                    traceback.print_exc()
                    return False, f"ERROR EN INSTANCIACI√ìN: {e}"
                    
            else:
                error_msg = "PantallaMenu NO hereda de Screen"
                print(f"‚ùå {error_msg}")
                return False, error_msg
        else:
            print("‚ùå PantallaMenu NO encontrada en pantallas.menu")
            attrs = [attr for attr in dir(menu_module) if not attr.startswith('_')]
            print(f"   üìã Atributos disponibles: {attrs}")
            return False, "PANTALLA_MENU NO ENCONTRADA"
    
    except ImportError as e:
        error_msg = f"ImportError: {e}"
        print(f"‚ùå {error_msg}")
        print("\nüìã Traceback completo:")
        traceback.print_exc()
        return False, error_msg
        
    except Exception as e:
        error_msg = f"Error inesperado: {type(e).__name__}: {e}"
        print(f"‚ùå {error_msg}")
        print("\nüìã Traceback completo:")
        traceback.print_exc()
        return False, error_msg

def mostrar_solucion_especifica(exito, error_msg):
    """Mostrar soluci√≥n espec√≠fica basada en el resultado"""
    separador("üîß SOLUCIONES RECOMENDADAS")
    
    if exito:
        print("""
üéØ TU MENU.PY FUNCIONA PERFECTAMENTE

El problema est√° en main.py. Aqu√≠ est√° la soluci√≥n:

1. EJECUTA ESTE COMANDO:
   python main_corregido.py

2. SI QUIERES ARREGLAR TU main.py ORIGINAL:
   - Busca la l√≠nea: from pantallas.menu import PantallaMenu
   - Aseg√∫rate de que los callbacks se pasen correctamente
   - Verifica que no haya try/except que oculte errores

3. USA ESTA IMPORTACI√ìN ROBUSTA EN main.py:
   
   try:
       from pantallas.menu import PantallaMenu
       print("‚úÖ PantallaMenu importada correctamente")
   except Exception as e:
       print(f"‚ùå Error importando: {e}")
       raise
""")
    else:
        print(f"""
‚ùå PROBLEMA DETECTADO: {error_msg}

üîß SOLUCIONES:

1. EJECUTA REPARACI√ìN AUTOM√ÅTICA:
   python arreglar_importacion.py

2. VERIFICACI√ìN MANUAL:
   - Abre pantallas/menu.py
   - Busca: class PantallaMenu(Screen):
   - Verifica: def __init__(self, **kwargs):
   - Confirma: super().__init__(**kwargs)

3. SI PERSISTE EL PROBLEMA:
   python test_simple.py
""")

def main():
    # Verificar directorio
    if not os.path.exists('main.py'):
        separador("‚ùå ERROR: DIRECTORIO INCORRECTO")
        print("No se encuentra main.py en este directorio")
        print(f"Directorio actual: {os.getcwd()}")
        print("Ejecuta este script desde el directorio del proyecto")
        return
    
    try:
        print("üöÄ Iniciando diagn√≥stico autom√°tico...")
        time.sleep(1)  # Peque√±a pausa para ver el inicio
        
        exito, mensaje = diagnosticar_automatico()
        
        mostrar_solucion_especifica(exito, mensaje)
        
        separador("üìä RESUMEN FINAL")
        if exito:
            print("üéâ DIAGN√ìSTICO: EXITOSO")
            print("üéØ ACCI√ìN: Ejecuta 'python main_corregido.py'")
        else:
            print("‚ö†Ô∏è DIAGN√ìSTICO: PROBLEMAS DETECTADOS")
            print("üéØ ACCI√ìN: Ejecuta 'python arreglar_importacion.py'")
        
    except Exception as e:
        separador("üí• ERROR EN DIAGN√ìSTICO")
        print(f"Error inesperado: {e}")
        traceback.print_exc()

if __name__ == '__main__':
    main()